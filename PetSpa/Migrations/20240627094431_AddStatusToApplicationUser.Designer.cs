// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetSpa.Data;

#nullable disable

namespace PetSpa.Migrations
{
    [DbContext(typeof(PetSpaContext))]
    [Migration("20240627094431_AddStatusToApplicationUser")]
    partial class AddStatusToApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("adminID");

                    b.Property<Guid>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__AD050086168743E5");

                    b.HasIndex(new[] { "Id" }, "UQ__Admin__A471AFFBB3371801")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<DateTime>("BookingSchedule")
                        .HasColumnType("datetime")
                        .HasColumnName("bookingSchedule");

                    b.Property<bool>("CheckAccept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("checkAccept");

                    b.Property<Guid>("CusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("invoiceID");

                    b.Property<Guid>("ManaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manaID");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentID");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit")
                        .HasColumnName("paymentstatus");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalAmount");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__C6D03BEDDB4CC5ED");

                    b.HasIndex("CusId");

                    b.HasIndex("ManaId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("BookingDetail", b =>
                {
                    b.Property<Guid>("BookingDetailId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingDetailID");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<string>("ComboType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comboType");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(7)")
                        .HasColumnName("duration");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("petID");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceID");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("BookingDetailId")
                        .HasName("PK__Booking___942CA05E22BB22C8");

                    b.HasIndex("BookingId");

                    b.HasIndex("ComboId");

                    b.HasIndex("PetId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("Booking_Detail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f2bd73c-05eb-421e-8bfa-b8593a1df163"),
                            ConcurrencyStamp = "1f2bd73c-05eb-421e-8bfa-b8593a1df163",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("287e0d38-8de0-4118-81a5-a0e29d616aea"),
                            ConcurrencyStamp = "287e0d38-8de0-4118-81a5-a0e29d616aea",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("3eea0aa4-b997-41ee-bcdf-452420c7e19e"),
                            ConcurrencyStamp = "3eea0aa4-b997-41ee-bcdf-452420c7e19e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("fb7fcbef-d654-4a24-8561-40d34053c4b8"),
                            ConcurrencyStamp = "fb7fcbef-d654-4a24-8561-40d34053c4b8",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("refreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("refreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<string>("ComboType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comboType");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(7)")
                        .HasColumnName("duration");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ComboId")
                        .HasName("PK__Combo__3C30C369B0BC9225");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.Property<Guid>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CusRank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cusRank");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("CusId")
                        .HasName("PK__Customer__BA9897D361CDA2E7");

                    b.HasIndex("AdminId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("UQ__Customer__A471AFFBD525B8F4");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Images", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("invoiceID");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__1252410C1622F1EA");

                    b.HasIndex("PaymentId");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Invoice__C6D03BECA66EC071")
                        .IsUnique();

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.Property<Guid>("ManaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manaID");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("adminID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<Guid>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("ManaId")
                        .HasName("PK__Manager__22DAE4264DC65004");

                    b.HasIndex("AdminId");

                    b.HasIndex(new[] { "Id" }, "UQ__Manager__A471AFFBEADB9F39")
                        .IsUnique();

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationTime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transactionId");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__123123123");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("petID");

                    b.Property<Guid>("CusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<DateTime?>("PetBirthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("petBirthday");

                    b.Property<decimal?>("PetHeight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("petHeight");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("petName");

                    b.Property<string>("PetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("petType");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("petWeight");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("PetId")
                        .HasName("PK__Pet__DDF85059445442CA");

                    b.HasIndex("CusId");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceID");

                    b.Property<Guid?>("ComboId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(7)")
                        .HasColumnName("duration");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text")
                        .HasColumnName("serviceDescription");

                    b.Property<byte[]>("ServiceImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("serviceImage");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("serviceName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__4550733F4C227307");

                    b.HasIndex("ComboId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<Guid>("Id")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ManagerManaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ManagerManaId");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__6465E19E05D526E9");

                    b.HasIndex("ManagerManaId");

                    b.HasIndex(new[] { "Id" }, "UQ__Staff__A471AFFB206680B8")
                        .IsUnique();

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("voucherID");

                    b.Property<Guid>("BookingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<Guid>("CusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiryDate");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("issueDate");

                    b.Property<Guid>("ManaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manaID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__F53389899EBEA773");

                    b.HasIndex("CusId");

                    b.HasIndex("ManaId");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Voucher__C6D03BEC32216A74")
                        .IsUnique();

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Admin", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("Admin", "Id")
                        .IsRequired()
                        .HasConstraintName("FK__Admin__accID__398D8EEE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__cusID__4AB81AF0");

                    b.HasOne("PetSpa.Models.Domain.Manager", "Manager")
                        .WithMany("Bookings")
                        .HasForeignKey("ManaId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Manager");

                    b.HasOne("PetSpa.Models.Domain.Payment", "Payments")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Booking_Payment");

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BookingDetail", b =>
                {
                    b.HasOne("Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Booking_D__booki__571DF1D5");

                    b.HasOne("PetSpa.Models.Domain.Combo", "Combo")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Booking_D__combo__5535A963");

                    b.HasOne("PetSpa.Models.Domain.Pet", "Pet")
                        .WithMany("BookingDetails")
                        .HasForeignKey("PetId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_D__petID__5441852A");

                    b.HasOne("PetSpa.Models.Domain.Service", "Service")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Booking_D__servi__534D60F1");

                    b.HasOne("PetSpa.Models.Domain.Staff", "Staff")
                        .WithMany("BookingDetails")
                        .HasForeignKey("StaffId");

                    b.Navigation("Booking");

                    b.Navigation("Combo");

                    b.Navigation("Pet");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.HasOne("Admin", null)
                        .WithMany("Customers")
                        .HasForeignKey("AdminId");

                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("PetSpa.Models.Domain.Customer", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Invoice", b =>
                {
                    b.HasOne("Booking", "Bookings")
                        .WithOne("Invoice")
                        .HasForeignKey("PetSpa.Models.Domain.Invoice", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice__booking__5AEE82B9");

                    b.HasOne("PetSpa.Models.Domain.Payment", "Payment")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Payment");

                    b.Navigation("Bookings");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.HasOne("Admin", "Admins")
                        .WithMany("Managers")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_Manager_Admin");

                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("PetSpa.Models.Domain.Manager", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Manager_AspNetUsers");

                    b.Navigation("Admins");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Customer", "Cus")
                        .WithMany("Pets")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Pet__cusID__47DBAE45");

                    b.Navigation("Cus");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Combo", "Combo")
                        .WithMany("Services")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Service_Combo");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("PetSpa.Models.Domain.Staff", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_AspNetUsers");

                    b.HasOne("PetSpa.Models.Domain.Manager", "Manager")
                        .WithMany("Staffs")
                        .HasForeignKey("ManagerManaId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Manager_ManagerManaId");

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Voucher", b =>
                {
                    b.HasOne("Booking", "Bookings")
                        .WithOne("Voucher")
                        .HasForeignKey("PetSpa.Models.Domain.Voucher", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__booking__6A30C649");

                    b.HasOne("PetSpa.Models.Domain.Customer", "Customers")
                        .WithMany("Vouchers")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__cusID__68487DD7");

                    b.HasOne("PetSpa.Models.Domain.Manager", "Managers")
                        .WithMany("Vouchers")
                        .HasForeignKey("ManaId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__manaID__693CA210");

                    b.Navigation("Bookings");

                    b.Navigation("Customers");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Admin", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("Voucher")
                        .IsRequired();
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Combo", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Pets");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Staffs");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Payment", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.Navigation("BookingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
