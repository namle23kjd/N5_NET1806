// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetSpa.Data;

#nullable disable

namespace PetSpa.Migrations
{
    [DbContext(typeof(PetSpaContext))]
    [Migration("20240601135209_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f6920e9c-eefe-4e77-bef2-19faa11fdec4",
                            ConcurrencyStamp = "f6920e9c-eefe-4e77-bef2-19faa11fdec4",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "caa3f555-e45f-480d-a8cb-0560a8c51b7d",
                            ConcurrencyStamp = "caa3f555-e45f-480d-a8cb-0560a8c51b7d",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Account", b =>
                {
                    b.Property<Guid>("AccId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accID");

                    b.Property<string>("ForgotPasswordToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("forgot_password_token");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("passWord");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userName");

                    b.HasKey("AccId")
                        .HasName("PK__Account__A471AFFAB1118508");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("adminID");

                    b.Property<Guid>("AccId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accID");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__AD050086168743E5");

                    b.HasIndex(new[] { "AccId" }, "UQ__Admin__A471AFFBB3371801")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("refreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<DateTime?>("BookingSchedule")
                        .HasColumnType("datetime")
                        .HasColumnName("bookingSchedule");

                    b.Property<Guid>("CusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<Guid>("StaffId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalAmount");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__C6D03BEDDB4CC5ED");

                    b.HasIndex("CusId");

                    b.HasIndex("StaffId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.BookingDetail", b =>
                {
                    b.Property<Guid>("BookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingDetailID");

                    b.Property<Guid>("BookingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<Guid?>("ComboId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<string>("ComboType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comboType");

                    b.Property<Guid>("PetId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("petID");

                    b.Property<Guid?>("ServiceId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceID");

                    b.Property<Guid?>("StaffId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.HasKey("BookingDetailId")
                        .HasName("PK__Booking___942CA05E22BB22C8");

                    b.HasIndex("BookingId");

                    b.HasIndex("ComboId");

                    b.HasIndex("PetId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("Booking_Detail", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<string>("ComboType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comboType");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ComboId")
                        .HasName("PK__Combo__3C30C369B0BC9225");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.Property<Guid>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<Guid>("AccId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accID");

                    b.Property<string>("CusRank")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cusRank");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("CusId")
                        .HasName("PK__Customer__BA9897D361CDA2E7");

                    b.HasIndex(new[] { "AccId" }, "UQ__Customer__A471AFFBD525B8F4")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceID");

                    b.Property<Guid>("BookingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__1252410C1622F1EA");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Invoice__C6D03BECA66EC071")
                        .IsUnique();

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Job", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("jobID");

                    b.Property<Guid>("BookingDetailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingDetailID");

                    b.Property<int?>("ManaId")
                        .HasColumnType("int")
                        .HasColumnName("manaID");

                    b.Property<Guid>("StaffId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.HasKey("JobId")
                        .HasName("PK__Job__164AA1884F5D3624");

                    b.HasIndex("ManaId");

                    b.HasIndex("StaffId");

                    b.HasIndex(new[] { "BookingDetailId" }, "UQ__Job__942CA05F6B2E2507")
                        .IsUnique();

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.Property<int>("ManaId")
                        .HasColumnType("int")
                        .HasColumnName("manaID");

                    b.Property<Guid>("AccId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("ManaId")
                        .HasName("PK__Manager__22DAE4264DC65004");

                    b.HasIndex(new[] { "AccId" }, "UQ__Manager__A471AFFBEADB9F39")
                        .IsUnique();

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Payment", b =>
                {
                    b.Property<int>("PayId")
                        .HasColumnType("int")
                        .HasColumnName("payID");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceID");

                    b.HasKey("PayId")
                        .HasName("PK__Payment__082E8AE3B771F3B3");

                    b.HasIndex(new[] { "InvoiceId" }, "UQ__Payment__1252410D691653AC")
                        .IsUnique();

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("petID");

                    b.Property<Guid>("CusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<DateOnly?>("PetBirthday")
                        .HasColumnType("date")
                        .HasColumnName("petBirthday");

                    b.Property<decimal?>("PetHeight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("petHeight");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("petName");

                    b.Property<string>("PetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("petType");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("petWeight");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("PetId")
                        .HasName("PK__Pet__DDF85059445442CA");

                    b.HasIndex("CusId");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("serviceID");

                    b.Property<Guid>("ComboId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comboID");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text")
                        .HasColumnName("serviceDescription");

                    b.Property<byte[]>("ServiceImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("serviceImage");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("serviceName");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__4550733F4C227307");

                    b.HasIndex("ComboId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staffID");

                    b.Property<Guid>("AccId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("accID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__6465E19E05D526E9");

                    b.HasIndex(new[] { "AccId" }, "UQ__Staff__A471AFFB206680B8")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucherID");

                    b.Property<Guid>("BookingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookingID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<Guid>("CusId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cusID");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("discount");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiryDate");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issueDate");

                    b.Property<int>("ManaId")
                        .HasColumnType("int")
                        .HasColumnName("manaID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__F53389899EBEA773");

                    b.HasIndex("CusId");

                    b.HasIndex("ManaId");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Voucher__C6D03BEC32216A74")
                        .IsUnique();

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Admin", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Account", "Acc")
                        .WithOne("Admin")
                        .HasForeignKey("PetSpa.Models.Domain.Admin", "AccId")
                        .IsRequired()
                        .HasConstraintName("FK__Admin__accID__398D8EEE");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Booking", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Customer", "Cus")
                        .WithMany("Bookings")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__cusID__4AB81AF0");

                    b.HasOne("PetSpa.Models.Domain.Staff", "Staff")
                        .WithMany("Bookings")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__staffID__4BAC3F29");

                    b.Navigation("Cus");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.BookingDetail", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_D__booki__571DF1D5");

                    b.HasOne("PetSpa.Models.Domain.Combo", "Combo")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ComboId")
                        .HasConstraintName("FK__Booking_D__combo__5535A963");

                    b.HasOne("PetSpa.Models.Domain.Pet", "Pet")
                        .WithMany("BookingDetails")
                        .HasForeignKey("PetId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking_D__petID__5441852A");

                    b.HasOne("PetSpa.Models.Domain.Service", "Service")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Booking_D__servi__534D60F1");

                    b.HasOne("PetSpa.Models.Domain.Staff", "Staff")
                        .WithMany("BookingDetails")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__Booking_D__staff__5629CD9C");

                    b.Navigation("Booking");

                    b.Navigation("Combo");

                    b.Navigation("Pet");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Account", "Acc")
                        .WithOne("Customer")
                        .HasForeignKey("PetSpa.Models.Domain.Customer", "AccId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__accID__44FF419A");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Invoice", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Booking", "Booking")
                        .WithOne("Invoice")
                        .HasForeignKey("PetSpa.Models.Domain.Invoice", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Invoice__booking__5AEE82B9");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Job", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.BookingDetail", "BookingDetail")
                        .WithOne("Job")
                        .HasForeignKey("PetSpa.Models.Domain.Job", "BookingDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__Job__bookingDeta__6383C8BA");

                    b.HasOne("PetSpa.Models.Domain.Manager", "Mana")
                        .WithMany("Jobs")
                        .HasForeignKey("ManaId")
                        .HasConstraintName("FK__Job__manaID__6477ECF3");

                    b.HasOne("PetSpa.Models.Domain.Staff", "Staff")
                        .WithMany("Jobs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK__Job__staffID__628FA481");

                    b.Navigation("BookingDetail");

                    b.Navigation("Mana");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Account", "Acc")
                        .WithOne("Manager")
                        .HasForeignKey("PetSpa.Models.Domain.Manager", "AccId")
                        .IsRequired()
                        .HasConstraintName("FK__Manager__accID__3D5E1FD2");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Payment", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Invoice", "Invoice")
                        .WithOne("Payment")
                        .HasForeignKey("PetSpa.Models.Domain.Payment", "InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__invoice__5EBF139D");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Customer", "Cus")
                        .WithMany("Pets")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Pet__cusID__47DBAE45");

                    b.Navigation("Cus");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Combo", "Combo")
                        .WithMany("Services")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Service_Combo");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Account", "Acc")
                        .WithOne("Staff")
                        .HasForeignKey("PetSpa.Models.Domain.Staff", "AccId")
                        .IsRequired()
                        .HasConstraintName("FK__Staff__accID__412EB0B6");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Voucher", b =>
                {
                    b.HasOne("PetSpa.Models.Domain.Booking", "Booking")
                        .WithOne("Voucher")
                        .HasForeignKey("PetSpa.Models.Domain.Voucher", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__booking__6A30C649");

                    b.HasOne("PetSpa.Models.Domain.Customer", "Cus")
                        .WithMany("Vouchers")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__cusID__68487DD7");

                    b.HasOne("PetSpa.Models.Domain.Manager", "Mana")
                        .WithMany("Vouchers")
                        .HasForeignKey("ManaId")
                        .IsRequired()
                        .HasConstraintName("FK__Voucher__manaID__693CA210");

                    b.Navigation("Booking");

                    b.Navigation("Cus");

                    b.Navigation("Mana");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Account", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Invoice");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.BookingDetail", b =>
                {
                    b.Navigation("Job");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Combo", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Pets");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Invoice", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Manager", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Pet", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Service", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("PetSpa.Models.Domain.Staff", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Bookings");

                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
